"extends Node" 
 
"class_name Utilities" 
 
"# Constants" 
"const UP_VECTOR = Vector3(0, 1, 0)" 
 
"# Time of day enum" 
"enum TimeOfDay {" 
"    DAWN," 
"    NOON," 
"    DUSK," 
"    NIGHT" 
"}" 
 
"# Meditation texts for different times of day" 
"const MEDITATIONS = {" 
"    \"dawn\": [" 
"        \"As morning light filters through the mist,\"," 
"        \"Sacred patterns emerge from darkness,\"," 
"        \"The garden awakens to divine geometry,\"," 
"        \"Each plant a symbol of celestial order.\"" 
"    ]," 
"    \"noon\": [" 
"        \"In the fullness of day, the garden reveals its wisdom,\"," 
"        \"Herbs arranged in patterns of the Trinity,\"," 
"        \"Roses in five-fold symmetry honoring the Virgin,\"," 
"        \"The cosmic order made manifest in living form.\"" 
"    ]," 
"    \"dusk\": [" 
"        \"As shadows lengthen across the garden paths,\"," 
"        \"The day's work completed in sacred harmony,\"," 
"        \"Plants return their essence to the fading light,\"," 
"        \"Preparing for night's contemplative silence.\"" 
"    ]," 
"    \"night\": [" 
"        \"Under starlight, the garden dreams of eternity,\"," 
"        \"Divine patterns continue their silent growth,\"," 
"        \"In darkness, the soul finds its deepest truths,\"," 
"        \"As above in the heavens, so below in the garden.\"" 
"    ]" 
"}" 
 
"# Helper function to get up vector" 
"static func get_up_vector() -> Vector3:" 
"    return UP_VECTOR" 
 
"# Convert time enum to string" 
"static func time_enum_to_string(time: int) -> String:" 
"    match time:" 
"        TimeOfDay.DAWN:" 
"            return \"dawn\"" 
"        TimeOfDay.NOON:" 
"            return \"noon\"" 
"        TimeOfDay.DUSK:" 
"            return \"dusk\"" 
"        TimeOfDay.NIGHT:" 
"            return \"night\"" 
"    return \"dawn\"" 
 
"# Convert time enum to float" 
"static func time_enum_to_float(time: int) -> float:" 
"    match time:" 
"        TimeOfDay.DAWN:" 
"            return 0.0" 
"        TimeOfDay.NOON:" 
"            return 0.25" 
"        TimeOfDay.DUSK:" 
"            return 0.5" 
"        TimeOfDay.NIGHT:" 
"            return 0.75" 
"    return 0.0" 
 
"# Convert float to time enum" 
"static func float_to_time_enum(time_float: float) -> int:" 
"    if time_float < 0.25:" 
"        return TimeOfDay.DAWN" 
"    elif time_float < 0.5:" 
"        return TimeOfDay.NOON" 
"    elif time_float < 0.75:" 
"        return TimeOfDay.DUSK" 
"    else:" 
"        return TimeOfDay.NIGHT" 
 
"# Interpolate between two time of day values" 
"static func interpolate_time_of_day(from_time: int, to_time: int, factor: float) -> float:" 
"    var from_float = time_enum_to_float(from_time)" 
"    var to_float = time_enum_to_float(to_time)" 
"    return lerp(from_float, to_float, factor)" 
 
"# Fade transition helper" 
"static func create_fade_transition(node: Node, property_path: String, from_value: float, to_value: float, duration: float) -> Tween:" 
"    var tween = node.create_tween()" 
"    tween.tween_property(node, property_path, to_value, duration)" 
"    return tween" 
 
"# Check if path exists in the project" 
"static func resource_exists(path: String) -> bool:" 
"    return ResourceLoader.exists(path)" 
 
"# Create clean version of a string (remove spaces, special chars)" 
"static func clean_string(text: String) -> String:" 
"    var result = text.to_lower()" 
"    result = result.replace(\" \", \"_\")" 
"    result = result.replace(\"-\", \"_\")" 
"    return result" 
